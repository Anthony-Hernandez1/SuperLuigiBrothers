/***********************************
*       square with classes         *
*   does not work as of yet         *
************************************/

#include <iostream>
#include <cmath>
#include <fstream>
#include "SDL_Plotter.h"
#include "Player.h"
#include "floor.h"
#include "Enemy.h"
#include "Score.h"
#include "Token.h"
using namespace std;
bool collision(Player, Enemy);
int main(int argc, char ** argv)
{
    ifstream input;
    const int windowHeight = 600;
    const int windowWidth = 1000;
    SDL_Plotter g(windowHeight,windowWidth);   // makes width and height of play window
    Score score1;
    Player mario;
    Player luigi;
    Floor plat1,    //bottom left
          plat2,    // bottom right
          plat3,    // top left
          plat4,    // top right platform
          middlePlat,
          f,
         leftPipe1, //top left
         rightPipe1,    // top right
         leftPipe2, // bottom left
         rightPipe2;    // bottom right
    Enemy turtle;
    Token token;
    int startTimer;
// player initialized
//    Background background;  // initialize background
    g.initSound("music.wav");
    g.playSound("music.wav");
    bool stopped = false;
    int jumpPosition = 0;

    //background.setBackground("logo.txt"); //The background's dimensions and RGB values are stored in background.txt
    //background.drawBackground(g); //Draw the background
    while (!g.getQuit())
    {

        // draw background
         for (int col = 0; col < windowWidth; ++col)
        {
            for (int row = 0; row < windowHeight; row++)
            {
                g.plotPixel(col,row, 255,0,00);
            }
        }
       // background.drawBackground(g);

        //input
        if(g.getKey() == DOWN_ARROW)    // allows you to move
        {
            mario.movePlayer(0,1);   // moves character down 1 (y access positive)
        }
        else if (g.getKey() == UP_ARROW)
        {
            mario.movePlayer(0,-1);
            g.initSound("jumps.wav");
            g.playSound("jumps.wav");
        }
        else if (g.getKey() == RIGHT_ARROW)
        {
            mario.movePlayer(1,0);
            score1.changeScore();

        }
        else if (g.getKey() == LEFT_ARROW)
        {
            mario.movePlayer(-1,0);
        }

        if(g.getKey() == 'S')    // allows you to move
        {
            luigi.movePlayer(0,2);   // moves character down 1 (y access positive)
        }
        else if (g.getKey() == 'W')
        {
            luigi.movePlayer(0,-2);
        }
        else if (g.getKey() == 'D')
        {
            luigi.movePlayer(2,0);
        }
        else if (g.getKey() == 'A')
        {
            luigi.movePlayer(-2,0);
        }

        turtle.move(1,0);
        if (turtle.posX == 800)
        {
            turtle.move(-1,0);
        }

        if(g.kbhit()){
            g.getKey();
        }
        g.clear();
    //drawing
        mario.draw(g);
        luigi.draw(g);
        turtle.drawEnemy(g);
// move token
        token.draw1(g);
        token.move(1,1);
        cout << score1.getScore();

  //  if(isCollision(turtle,mario))
    //   {
      //     turtle.hp-=1;
       //}
/****************************
*       platforms     *
****************************/

//platform1
        int pX = 0;
        int pY = 400;
        plat1.setWidth(370);    // bottom left platform
        plat1.setHeight(30);
        plat1.draw(g,pX,pY);

        plat2.setWidth(400);    // bottom right platform
        plat2.setHeight(30);
        pX = 600;
        pY = 400;
        plat2.draw(g,pX,pY);

        plat3.setWidth(370);    // top left platform
        plat3.setHeight(30);
        pX = 0;
        pY = 150;
        plat3.draw(g,pX,pY);

        plat4.setWidth(400);    // top right
        plat4.setHeight(30);
        pX = 600;
        pY = 150;
        plat4.draw(g,pX,pY);

        middlePlat.setWidth(280);    // middle
        middlePlat.setHeight(25);
        pX = 330;
        pY = 300;
        middlePlat.draw(g,pX,pY);

        pX = 0;
        pY = 560;
        f.drawFloor(g,pX,pY);

/*********************
*   Pipes           *
*********************/
        leftPipe1.setWidth(70);    // top left
        leftPipe1.setHeight(25);
        pX = 0;
        pY = 530;
        leftPipe1.drawPipe(g,pX,pY);

        leftPipe2.setWidth(70);    // bottom right
        leftPipe2.setHeight(25);
        pX = 940;
        pY = 530;
        leftPipe2.drawPipe(g,pX,pY);
        g.update();
    }
}

